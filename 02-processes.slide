Processes
An introduction to distributed processes
18 Mar 2020
Tags: coders, programming, distributed

Obed N Munoz
Cloud Software Engineer
obed.n.munoz@gmail.com
http://obedmr.com
@_obedmr


* Agenda

- Threads
- Virtualization
- Clients
- Servers


* Threads

_Threads_ are a key element of distributed systems in order to take advantage of the *multicore* and *multiprocesses* environments we have in modern computers. It will also provide proper mechanisms for defining *client-server* architectures.

They provide a *finer* *granularity* in the form of multiple threads per process in order to get better performance.

A *thread* *context* often consists of nothing more than the processor context, along with some other information for thread management.

The *communication* is simpler than processes, mainly because they can have shared memory while processes require various modes of IPC (Inter-Process Communications) like semaphores, message queues, pipes and others.


* Virtualization

There's an *illusion* *of* *parallelism* on single CPU machines. We can see some kind of parallelism between threads and processes in our modern computers, that's why we're able to have many applications running in our computers.

By rapidly *switching* between threads and processes, the illusion of parallelism is created.

This separation between having a single CPU and being able to pretend there are more can be extended to other resources as well, leading to what is known as *resource* *virtualization*.


* Virtualization: Princliples

In practice, every (distributed) computer system offers a programming interface to higher-level software, as shown in Figure 3.6(a).

In its essence, virtualization deals with *extending* *or* *replacing* an existing interface so as to mimic the behavior of another system, as shown in Figure 3.6(b).

.image images/02/virtualization_principles.png 350 550


* Virtualization: Types 1/3

Computer systems generally offer four different types of interfaces, at three different levels:

- An interface between the hardware and software, the *Instruction* *set* *Architecture* *(ISA)* is foming the set of machine instructions:
  - Privileged Instructions
  - General Instructions

- *System* *calls* (offered by the Operating System)

- *Application* *Programming* *Interface* *(API)* - Commonly offered by libraries.


* Virtualization: Types 2/3

.image images/02/virtualization_interfaces.png


* Virtualization: Types 3/3
.image images/02/virtualization_types.png 500 900


* Virtualization: Let's discuss about performance

Let's talk about the following questions/topics:

- What are the implications of virtualizing hardware through software?
- What's faster or more performant?
- What are the current Technologies for Virtualization?


* Virtualization: Cloud Computing 1/2

From the perspective of distributed systems, the most important application of virtualization lies in cloud computing. Below a list of the common virtualized services that are being offered in Cloud Computing:

- *Infrastructure-as-a-Service* *(IaaS)* covering the basic infrastructure
- *Platform-as-a-Service* *(PaaS)* covering system-level services
- *Software-as-a-Service* *(SaaS)* containing actual applications


* Virtualization: Cloud Computing 2/2

.image images/02/iaas_paas_saas.png 550 750


* Clients: Networked user interfaces
A common use case for clients is to provide the means for users to interact with a remote server. Below a chart with the 2 types of interaction that can be supported.

.image images/02/networked_clients.png 450 600


* Clients: Example - The X Window System

.image images/02/x_window_system.png


* Servers
A server is a process implementing a specific service on behalf of a collection of clients.

- In an *iterative* *server*,the server itself handles the request and, if necessary, returns a response to the requesting client.

- A *concurrent* *server* does not handle the request itself, but passes it to a separate thread or another process, after which it immediately waits for the next incoming request.

- Another issue is where clients contact a server. In all cases, clients send requests to an *endpoint*, also called a *port*, at the machine where the server is running.

- Common and globally known port examples:
  - 80   - HTTP
  - 433  - HTTPS
  - 22   - SSH
  - 3306 - MariaDB / MySQL Databases
  - 5900 - VNC
  * More examples at https://www.ietf.org/rfc/rfc1700.txt?number=1700


* Servers: Contacting Servers

.image images/02/contacting_server.png 550 650


* Servers: How to deal with server's interruptions?

Let's disss the following questions:

- What if a client connection abruptly disconnects from the server?
- When the communication channel is slow?
- What about server-side issues (cpu, memory, power)?
- How to recover from an interruption? should we just ignore it?


* Servers: Stateless vs Stateful

- A *stateless* *server* does not keep information on the state of its clients, and can change its own state without having to inform any client [Birman, 2012].

- A *stateful* *server* generally maintains persistent information on its clients. This means that the information needs to be explicitly deleted by the server.

*Let's* *discuss:*
List the pros and cons of the following server implementations:

 - Stateless Server
   - Fully stateless
   - Soft stateless
   
 - Stateful Server
   - Session State
   - Permanent State


* Servers: Example - Aache HTTP Server

.image images/02/apacher_server.png 550 800


* Servers: Example - 3-tiered server cluster

.image images/02/3_tiered_server_cluster.png

* Resources
This material is genereated thanks to some extracts from the following resources:

- *Distributed* *Systems* (Chapter 3) - _by_ _Maarten_van_Steen_ _and_ _Andrew_ _S._ _Tanenbaum_

- [[https://medium.com/the-polyglot-programmer/what-are-goroutines-and-how-do-they-actually-work-f2a734f6f991][What are goroutines and how do they actually work?]] - _Medium_ _Article_